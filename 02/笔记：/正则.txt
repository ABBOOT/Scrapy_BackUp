正则表达式，神兵利器

----------------------------------------tag----------------------------------------
Python里面正则模块方式
pattern = re.compile('')将正则表达式编译成pattern对象
pattern.match()从起始位置开始往后找，返回第一个符合规则的
pattern.search()从任何位置开始往后找，返回第一个符合规则的
pattern.findall()所有的全部匹配，返回列表
pattern.finditer()所有的全部匹配，返回一个迭代器
pattern.split()分割字符串，返回列表
pattern.sub()替换

显示m.group()/m.group(0)（分组时用0）

----------------------------------------tag----------------------------------------
r字符串->原生字符串
u字符串->unicode字符串

There is Some Rule:
1、-----------
. 匹配除\n外的任意字符
\ 转义字符，\"="
[]字符集，比如[a-z]匹配a-z的字符

2、字符集------
\d数字，相当于[0-9]
\D非数字
\s空白，如：space、\t、\r、\n、\f、\v
\S非空白，除了\s的
\w单词字符，相当于：[a-zA-Z0-9_]
\W非单词字符

3、数量--------
*    0/无限 次
+    1/无限 次
？    0/1   次
{m}   m    次
{m，n} m-n  次
{m,n}? 加？使m-n匹配非贪婪模式

4、边界--------
^ 表示开头
$ 表示结尾
\A以什么开头，如：\Aabc表示以abc开头
\Z以什么结尾，如：abc\Z表示以abc结尾
\b匹配\w与\W之间
\B表示非\b

5、逻辑--------
| 左or右
()    建立分组，编号从1开始，之后每遇到'('号，编号+1
(?P<>)建立别名在<>里的分组
\<>引用编号为<>里的分组
(?P=)引用别名=什么的分组

6、特殊构造-----（特殊构造无法作为分组）
(?:abc)[m] 意：匹配[m]个abc
a(?#xx)123 意：xx被作为注释来看
(?<=\d)a   意：前面是数字的那个a
(?<!\d)a   意：前面不是数字那个a
a(?=\d)    意：后面是数字的那个a
a(?!\d)    意：后面不是数字那个a


